import { Component, OnInit } from '@angular/core';
import { AssetsService } from './service/assets.service';
import { Asset } from 'src/app/shared/model/asset';
import { ToastrService } from 'ngx-toastr';

// u fajlu angular.json, u atribut scripts ubaceno je: "node_modules/bootbox/dist/bootbox.min.js"
declare const bootbox: any;


@Component({
  selector: 'app-assets-panel',
  templateUrl: './assets-panel.component.html',
  styleUrls: ['./assets-panel.component.css']
})
export class AssetsPanelComponent implements OnInit {

  selectedElement: any;

  constructor(private assetsService: AssetsService, private toastr: ToastrService) { }

  ngOnInit() {
    this.assetsService.selectedElementEvent.subscribe(
      (selectedElement: any) => {
        this.selectedElement = selectedElement;
        console.log('Selected element:');
        console.log(selectedElement);
      }
    );
  }

  isUsed(asset: Asset, type: string) {
    return asset.securityGoals.filter(sg => sg.name === type).length > 0;
  }

  changeUsing(asset: Asset, type: string) {
    const securityGoals = asset.securityGoals.filter(sg => sg.name === type);
    if (securityGoals.length > 0) {
        const index = asset.securityGoals.indexOf(securityGoals[0]);
        asset.securityGoals.splice(index, 1);
    } else {
      asset.securityGoals.push( {name: type, priority: 1} );
    }
  }

  getSecurityGoal(asset: Asset, type: string) {
    const securityGoals = asset.securityGoals.filter(sg => sg.name === type);
    if (securityGoals.length > 0) {
      return securityGoals[0];
    }
    return { priority: 0 };
  }

  removeAsset(index) {
    const assetId = this.selectedElement.assets[index].assetId;
    this.selectedElement.assets.splice(index, 1);
    this.toastr.info('Asset (' + assetId + ') is removed!');
  }

  addAsset() {
    const that = this;

    const dialog = bootbox.dialog({
        message: 'Add new asset',
        centerVertical: true,
        closeButton: false,
        buttons: {
             add_asset: {
                label: 'ADD ASSET',
                className: 'btn-success',
                callback: function () {
                    return that.checkAndSaveNewAsset(dialog);
                }
            },
            cancel: {
                label: 'CANCEL',
                className: 'btn-danger'
            }
        }
    });
    dialog.init(function(){
        const dialogBodyHtml = that.getDialogBodyHtml();
        dialog.find('.bootbox-body').html(dialogBodyHtml);
    });
  }

  checkAndSaveNewAsset(dialog: any) {
    const assetId = dialog.find('#assetId')[0].value;
    const category = dialog.find('#category')[0].value;
    const confidentiality = dialog.find('#confidentiality')[0].checked;
    const confidentialityPriority = dialog.find('#confidentialityPriority')[0].value;
    const integrity = dialog.find('#integrity')[0].checked;
    const integrityPriority = dialog.find('#integrityPriority')[0].value;
    const availability = dialog.find('#availability')[0].checked;
    const availabilityPriority = dialog.find('#availabilityPriority')[0].value;

    const retValue = this.checkNewAssetData(assetId, category, confidentiality, confidentialityPriority,
                            integrity, integrityPriority, availability, availabilityPriority);

    if (!retValue) {
      return false;
    }

    const newAsset = {
      assetId,
      category,
      securityGoals: []
    };
    if (confidentiality) {
      newAsset.securityGoals.push(
        {
          name: 'confidentiality',
          priority: confidentialityPriority
        }
      );
    }
    if (integrity) {
      newAsset.securityGoals.push(
        {
          name: 'integrity',
          priority: integrityPriority
        }
      );
    }
    if (availability) {
      newAsset.securityGoals.push(
        {
          name: 'availability',
          priority: availabilityPriority
        }
      );
    }
    this.selectedElement.assets.push(newAsset);
    this.toastr.success('You have successfully added asset!');
    return true;
  }

  checkNewAssetData(assetId, category, confidentiality, confidentialityPriority,
                    integrity, integrityPriority, availability, availabilityPriority) {
    if (assetId === '') {
      this.toastr.error('Asset Id must not be an empty string');
      return false;
    }

    const alreadyExists = this.selectedElement.assets.map(a => a.assetId).includes(assetId);
    if (alreadyExists) {
      this.toastr.error('Asset with Asset Id: \'' + assetId + '\', already exists!');
      return false;
    }

    if (category === '') {
      this.toastr.error('Category must not be an empty string');
      return false;
    }

    if (confidentiality) {
      if (confidentialityPriority === '') {
        this.toastr.error('Priority for confidentiality must not be an empty string');
        return false;
      }
      const confidentialityPriorityNum = +confidentialityPriority;
      if (confidentialityPriorityNum < 1 || confidentialityPriorityNum > 5) {
        this.toastr.error('Priority for confidentiality must be in the range of 1 to 5');
        return false;
      }
    }

    if (integrity) {
      if (integrityPriority === '') {
        this.toastr.error('Priority for integrity must not be an empty string');
        return false;
      }
      const integrityPriorityNum = +integrityPriority;
      if (integrityPriorityNum < 1 || integrityPriorityNum > 5) {
        this.toastr.error('Priority for integrity must be in the range of 1 to 5');
        return false;
      }
    }

    if (availability) {
      if (availabilityPriority === '') {
        this.toastr.error('Priority for availability must not be an empty string');
        return false;
      }
      const availabilityPriorityNum = +availabilityPriority;
      if (availabilityPriorityNum < 1 || availabilityPriorityNum > 5) {
        this.toastr.error('Priority for availability must be in the range of 1 to 5');
        return false;
      }
    }

    return true;
  }

  getDialogBodyHtml() {
    return `<div class="input-group input-group-sm mb-1 ml-1 mr-1">
                <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm">Asset Id</span>
                </div>
                <input id="assetId" type="text" class="form-control" aria-label="Asset Id"
                        aria-describedby="inputGroup-sizing-sm">
            </div>
            <div class="input-group input-group-sm mb-1 ml-1 mr-1">
                    <div class="input-group-prepend">
                            <span class="input-group-text" id="inputGroup-sizing-sm">Category</span>
                    </div>
                    <select id="category" class="custom-select" aria-label="Category" aria-describedby="inputGroup-sizing-sm">
                            <option value="information">Information</option>
                            <option value="physical">Physical</option>
                    </select>
            </div>
            <div class="input-group input-group-sm mb-1 ml-1 mr-1">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        Confidentiality &nbsp; <input id="confidentiality" type="checkbox">
                    </div>
                    <span class="input-group-text" id="inputGroup-sizing-sm">Priority</span>
                </div>
                <input id="confidentialityPriority" type="number" value="0" class="form-control"  aria-label="Priority"
                    aria-describedby="inputGroup-sizing-sm">
            </div>
            <div class="input-group input-group-sm mb-1 ml-1 mr-1">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        Integrity &nbsp; <input id="integrity" type="checkbox">
                    </div>
                    <span class="input-group-text" id="inputGroup-sizing-sm">Priority</span>
                </div>
                <input id="integrityPriority" type="number" value="0" class="form-control"  aria-label="Priority"
                    aria-describedby="inputGroup-sizing-sm">
            </div>
            <div class="input-group input-group-sm mb-1 ml-1 mr-1">
                <div class="input-group-prepend">
                    <div class="input-group-text">
                        Availability &nbsp; <input id="availability" type="checkbox">
                    </div>
                    <span class="input-group-text" id="inputGroup-sizing-sm">Priority</span>
                </div>
                <input id="availabilityPriority" type="number" value="0" class="form-control"  aria-label="Priority"
                    aria-describedby="inputGroup-sizing-sm">
            </div>`;
  }

}
