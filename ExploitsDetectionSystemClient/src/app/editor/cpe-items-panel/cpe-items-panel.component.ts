import { Component, OnInit } from '@angular/core';
import { ToastrService } from 'ngx-toastr';
import { CpeItemsService } from './service/cpe-items.service';

// u fajlu angular.json, u atribut scripts ubaceno je: "node_modules/bootbox/dist/bootbox.min.js"
declare const bootbox: any;

@Component({
  selector: 'app-cpe-items-panel',
  templateUrl: './cpe-items-panel.component.html',
  styleUrls: ['./cpe-items-panel.component.css']
})
export class CpeItemsPanelComponent implements OnInit {

  selectedElement: any;

  constructor(private cpeItemsService: CpeItemsService, private toastr: ToastrService) { }

  ngOnInit() {
    this.cpeItemsService.selectedElementEvent.subscribe(
      (selectedElement: any) => {
        this.selectedElement = selectedElement;
        console.log('Selected element:');
        console.log(selectedElement);
      }
    );
  }

  addCpeItem() {
    const that = this;

    const dialog = bootbox.dialog({
        message: 'Add new CPE item',
        centerVertical: true,
        closeButton: false,
        buttons: {
             add_asset: {
                label: 'ADD CPE ITEM',
                className: 'btn-success',
                callback: function () {
                    return that.checkAndSaveNewCpeItem(dialog);
                }
            },
            cancel: {
                label: 'CANCEL',
                className: 'btn-danger'
            }
        }
    });
    dialog.init(function(){
        const dialogBodyHtml = that.getDialogBodyHtml();
        dialog.find('.bootbox-body').html(dialogBodyHtml);
    });
  }

  checkAndSaveNewCpeItem(dialog: any) {
    const title = dialog.find('#titleId')[0].value;
    const cpeUrl = dialog.find('#cpeUrlId')[0].value;
    const description = dialog.find('#descriptionId')[0].value;

    const retValue = this.checkNewCpeItemData(title, cpeUrl, description);

    if (!retValue) {
      return false;
    }

    const newCpeItem = {
      title,
      cpeUrl,
      description
    };

    this.selectedElement.cpeItems.push(newCpeItem);
    this.toastr.success('You have successfully added CPE item!');
    return true;
  }

  checkNewCpeItemData(title, cpeUrl, description) {
    if (title === '') {
      this.toastr.error('Title must not be an empty string');
      return false;
    }

    if (cpeUrl === '') {
      this.toastr.error('Cpe url must not be an empty string');
      return false;
    }

    if (description === '') {
      this.toastr.error('Description must not be an empty string');
      return false;
    }

    const alreadyTitleExists = this.selectedElement.cpeItems.map(ci => ci.title).includes(title);
    if (alreadyTitleExists) {
      this.toastr.error('CPE Item with title: \'' + title + '\', already exists!');
      return false;
    }

    const alreadyCpeUrlExists = this.selectedElement.cpeItems.map(ci => ci.cpeUrl).includes(cpeUrl);
    if (alreadyCpeUrlExists) {
      this.toastr.error('CPE Item with cpeUrl: \'' + title + '\', already exists!');
      return false;
    }

    return true;
  }

  removeCpeItem(index) {
    const cpeItem = this.selectedElement.cpeItems[index].assetId;
    this.selectedElement.cpeItems.splice(index, 1);
    this.toastr.info('CpeItem (' + cpeItem + ') is removed!');
  }

  getDialogBodyHtml() {
    return `<div class="input-group input-group-sm mb-1 ml-1 mr-1">
                <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm" style="width: 89px">Title</span>
                </div>
                <input id="titleId" type="text" class="form-control" aria-label="Title"
                        aria-describedby="inputGroup-sizing-sm">
            </div>
            <div class="input-group input-group-sm mb-1 ml-1 mr-1">
                <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm" style="width: 89px">CPE Url</span>
                </div>
                <input id="cpeUrlId" type="text" class="form-control" aria-label="CPE Url"
                        aria-describedby="inputGroup-sizing-sm">
            </div>
            <div class="input-group input-group-sm mb-1 ml-1 mr-1">
                <div class="input-group-prepend">
                        <span class="input-group-text" id="inputGroup-sizing-sm" style="width: 89px">Description</span>
                </div>
                <input id="descriptionId" type="text" class="form-control" aria-label="Description"
                        aria-describedby="inputGroup-sizing-sm">
            </div>`;
  }
}
