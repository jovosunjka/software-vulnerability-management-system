import { Injectable, Output, EventEmitter } from '@angular/core';
import { DataFlowDiagram } from 'src/app/shared/model/data-flow-diagram';
import { ElementOrFlow } from 'src/app/shared/model/element-or-flow';

@Injectable({
  providedIn: 'root'
})
export class DataFlowDiagramsService {

  @Output() addNewDiagram: EventEmitter<string> = new EventEmitter<string>();
  // @Output() newIdOfDiagram: EventEmitter<string> = new EventEmitter<string>();

  @Output() navigateToElementOrFlowEvent: EventEmitter<object> = new EventEmitter<object>();

  private canvasEventEmitters: Map<string, EventEmitter<string>>;

  constructor() {
    this.canvasEventEmitters = new Map<string, EventEmitter<string>>();
  }

  /*addNew(newDiagram: string) {
    this.addNewDiagram.emit( newDiagram );
  }*/

  addCanvasEventEmitterName(diagramId: string) {
    this.canvasEventEmitters.set(diagramId, new EventEmitter<string>());
  }

  @Output()
  getCanavasEventEmitter(diagramId: string): EventEmitter<string> {
      return this.canvasEventEmitters.get(diagramId);
  }

  returnNewIdOfDiagram(parentDiagramId: string, newId: string) {
    const canvasEventEmitter = this.canvasEventEmitters.get(parentDiagramId);
    if (canvasEventEmitter) {
      canvasEventEmitter.emit( newId );
    }
  }

  navigateToElementOrFlow(diagram: string, elementOrFlow: ElementOrFlow[]) {
    this.navigateToElementOrFlowEvent.emit( {diagram, elementOrFlow} );
  }

}
