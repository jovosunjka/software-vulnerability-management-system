import { Component, OnInit, Input, Output, EventEmitter } from '@angular/core';
import { Weakness } from 'src/app/shared/model/weakness';
import { ElementOrFlow } from 'src/app/shared/model/element-or-flow';
import { DataFlowDiagramsService } from '../data-flow-diagrams-panel/service/data-flow-diagrams.service';
import { PotentialMitigation } from 'src/app/shared/model/potential-mitigation';
import { DetectionMethod } from 'src/app/shared/model/detection-method';
import { CommonConsequence } from 'src/app/shared/model/common-consequence';

// u fajlu angular.json, u atribut scripts ubaceno je: "node_modules/bootbox/dist/bootbox.min.js"
declare const bootbox: any;


@Component({
  selector: 'app-weakness-list-panel',
  templateUrl: './weakness-list-panel.component.html',
  styleUrls: ['./weakness-list-panel.component.css']
})
export class WeaknessListPanelComponent implements OnInit {

  @Input() weaknessList: Weakness[];
  @Output() selectedWeaknessIndexEvent: EventEmitter<Weakness> = new EventEmitter<Weakness>();

  constructor(private dataFlowDiagramsService: DataFlowDiagramsService) {}

  ngOnInit() {
  }

  clickOnRow(index) {
    this.selectedWeaknessIndexEvent.emit(index);
  }

  navigateToElementOrFlow(diagram: string, elementOrFlow: ElementOrFlow[]) {
    this.dataFlowDiagramsService.navigateToElementOrFlow(diagram, elementOrFlow);
  }

  showPotentialMitigations(weaknessName: string, potentialMitigations: PotentialMitigation[]) {
    const that = this;
    weaknessName += ' - Potential Mitigations';
    const dialog = bootbox.dialog({
        title: weaknessName,
        message: 'Potential Mitigations',
        centerVertical: true,
        closeButton: true
    });
    dialog.init(function() {
        const dialogBodyHtml = that.getPotentialMitigationsDialogBodyHtml(potentialMitigations);
        dialog.find('.bootbox-body').html(dialogBodyHtml);
    });
  }

  getPotentialMitigationsDialogBodyHtml(potentialMitigations: PotentialMitigation[]) {
    let html = `<div style="margin-left: 0px; float: left; height: 400px; width: 480px;
                        background: #fff; overflow-y: scroll; margin-bottom: 0px;">
                    <div id="accordion">`;
    potentialMitigations.forEach((pm, i) => {
        html += `<div class="card">
                    <div class="card-header" id="heading_${i}">
                        <h5 class="mb-0">
                            <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapse_${i}"
                                 aria-expanded="true" aria-controls="collapse_${i}">
                                 Phase:&nbsp;${pm.phase}
                            </button>
                        </h5>
                    </div>

                    <div id="collapse_${i}" class="collapse" attr.aria-labelledby="heading_${i}" data-parent="#accordion">
                        <div class="card-body">`;
        if (pm.strategy) {
            html += `<div><p><b>Strategy:&nbsp;${pm.strategy}</b></p></div>`;
        }
        if (pm.text) {
            html += `<div><p>${pm.text}</p></div>`;
        }
        if (pm.effectiveness) {
            html += `<div><p><b>Effectiveness:&nbsp;${pm.effectiveness}</b></p></div>`;
        }
        if (pm.note) {
            html += `<div><p><b>Note:&nbsp;${pm.note}</b></p></div>`;
        }
        html += '</div></div></div>';
    });
    html += '</div></div>';
    return html;
  }

  showDetectionMethods(weaknessName: string, detectionMethods: DetectionMethod[]) {
    const that = this;
    weaknessName += ' - Detection Methods';
    const dialog = bootbox.dialog({
        title: weaknessName,
        message: 'Detection Methods',
        centerVertical: true,
        closeButton: true
    });
    dialog.init(function() {
        const dialogBodyHtml = that.getDetectionMethodsDialogBodyHtml(detectionMethods);
        dialog.find('.bootbox-body').html(dialogBodyHtml);
    });
  }

  getDetectionMethodsDialogBodyHtml(detectionMethods: DetectionMethod[]) {
    let html = `<div style="margin-left: 0px; float: left; height: 400px; width: 480px;
                        background: #fff; overflow-y: scroll; margin-bottom: 0px;">
                    <div id="accordion">`;
    detectionMethods.forEach((dm, i) => {
        html += `<div class="card">
                    <div class="card-header" id="heading_${i}">
                        <h5 class="mb-0">
                            <button class="btn btn-link collapsed" data-toggle="collapse" data-target="#collapse_${i}"
                                 aria-expanded="true" aria-controls="collapse_${i}">
                                ${dm.name}
                            </button>
                        </h5>
                    </div>

                    <div id="collapse_${i}" class="collapse" attr.aria-labelledby="heading_${i}" data-parent="#accordion">
                        <div class="card-body">`;
        if (dm.text) {
            html += `<div><p>${dm.text}</p></div>`;
        }
        if (dm.effectiveness) {
            html += `<div><p><b>Effectiveness:&nbsp;${dm.effectiveness}</b></p></div>`;
        }
        if (dm.note) {
            html += `<div><p><b>Note:&nbsp;${dm.note}</b></p></div>`;
        }
        html += '</div></div></div>';
    });
    html += '</div></div>';
    return html;
  }

  showCommonConsequences(weaknessName: string, commonConsequences: CommonConsequence[]) {
    const that = this;
    weaknessName += ' - Common Consequences';
    const dialog = bootbox.dialog({
        title: weaknessName,
        message: 'Common Consequences',
        size: 'extra-large',
        centerVertical: true,
        closeButton: true
    });
    dialog.init(function() {
        const dialogBodyHtml = that.getCommonConsequencesDialogBodyHtml(commonConsequences);
        dialog.find('.bootbox-body').html(dialogBodyHtml);
    });
  }

  getCommonConsequencesDialogBodyHtml(commonConsequences: CommonConsequence[]) {
    let html = `<div style="margin-left: 0px; float: left; height: 400px; width: 1100px;
                background: #fff; overflow-x: scroll; overflow-y: scroll; margin-bottom: 0px;">
                <table cellpadding="5" cellspacing="0" class="table-bordered" >
                    <thead>
                        <th style="width: 14%">Scope</th>
                        <th>Impact</th>
                        <th>Likelihood</th>
                    </thead>
                    <tbody>`;
    commonConsequences.forEach(cc => {
        html += `<tr>
                    <td>${cc.scope}</td>
                    <td>
                        <div style="padding-top:5px">
                            <p>
                                <span><b style="color: blue">Technical Impact:</b> </span> <i> ${cc.impact.technicalImpact}</i>
                            </p>
                        </div>
                        <div style="padding-top:5px">${cc.impact.text}</div>
                    </td>
                    <td>${cc.likelihood}</td>
                </tr>`;
    });
    html += `</tbody>
            </table>
            </div>`;
    return html;
  }

}
