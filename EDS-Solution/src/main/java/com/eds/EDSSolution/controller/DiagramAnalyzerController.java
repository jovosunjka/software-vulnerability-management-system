package com.eds.EDSSolution.controller;

import com.eds.EDSSolution.model.dto.ElementExploitDTO;
import com.eds.EDSSolution.model.dto.ThreatDTO;
import com.eds.EDSSolution.service.DiagramAnalyzerService;

import com.eds.EDSSolution.utils.ResourcesLocation;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.InputStreamResource;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import java.io.*;
import java.util.Arrays;
import java.util.List;
import java.util.Objects;

@RestController
@RequestMapping(value = "/api")
public class DiagramAnalyzerController {


    @Autowired
    private DiagramAnalyzerService analyzerService;
    private ResourcesLocation resourcesLocation = new ResourcesLocation();

    /**
     * This method starts analyzing process and returns list ot all exploits found on the complex process elements,
     * if they exist.
     *
     * @param sourceDiagramXml diagram that is going to be analyzed
     * @return list of ElementExploitDTO. Each ElementExploitDTO contains found exploits on the complex process elements.
     * @throws Exception some user-defined exception
     */
    @PostMapping(value = "/analyze-diagram",
            consumes = MediaType.TEXT_XML_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<ThreatDTO>> analyzeDiagram(@RequestBody String sourceDiagramXml) throws Exception {
        List<ThreatDTO> threatDTOs = analyzerService.analyze(sourceDiagramXml);
        return new ResponseEntity<>(threatDTOs, HttpStatus.OK);
    }

    /**
     * This method starts analyzing process and returns list ot all exploits found on the complex process elements,
     * if they exist.
     *
     * @param sourceDiagram diagram that is going to be analyzed
     * @param xmlSchema     schema of the given diagram
     * @param exploits      xml with definitions of the exploits
     * @return list of ElementExploitDTO. Each ElementExploitDTO contains found exploits on the complex process elements.
     * @throws Exception some user-defined exception
     */
    @PostMapping(value = "/analyze-diagram-file",
            produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<ElementExploitDTO>> analyzeDiagramFile(@RequestParam("sourceDiagram") MultipartFile sourceDiagram,
                                                                  @RequestParam("xmlSchema") MultipartFile xmlSchema,
                                                                  @RequestParam("exploits") MultipartFile exploits
    ) throws Exception {
        File diagramFile = getFile(sourceDiagram, true);
        File exploitsFile = getFile(exploits, false);

        List<ElementExploitDTO> decomposerPatterns = analyzerService.startAnalyzer(diagramFile, exploitsFile);

        return new ResponseEntity<>(decomposerPatterns, HttpStatus.OK);
    }

    /**
     * This method starts analyzing process and returns list ot all exploits found on the complex process elements,
     * if they exist.
     *
     * @param sourceDiagramXml diagram that is going to be analyzed
     * @param fileName
     * @return list of ElementExploitDTO. Each ElementExploitDTO contains found exploits on the complex process elements.
     * @throws Exception some user-defined exception
     */
    @PostMapping(value = "/analyze-diagram-first-phase",
            consumes = MediaType.TEXT_XML_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE)
    public ResponseEntity<List<ElementExploitDTO>> analyzeDiagramFile(@RequestBody String sourceDiagramXml,
                                                                      @RequestParam("fileName") String fileName
    ) throws Exception {
        saveFile(sourceDiagramXml, fileName, true);
        List<ElementExploitDTO> decomposerPatterns = analyzerService.startAnalyzer(sourceDiagramXml);

        return new ResponseEntity<>(decomposerPatterns, HttpStatus.OK);
    }

    /**
     * This method will receive all exploits that should be saved and added to the report. These exploits are found
     * on the complex process elements.
     *
     * @param elementExploits list of all exploits found on the complex process elements
     * @return created report
     * @throws Exception some user-defined exception
     */
    @PostMapping(value = "/create-report",
            produces = MediaType.APPLICATION_PDF_VALUE)
    public ResponseEntity<InputStreamResource> createReport(@RequestBody List<ElementExploitDTO> elementExploits)
            throws Exception {
        File exploitsFile = new File(resourcesLocation.getExploitLocation());
        File folder = new File(resourcesLocation.getTestFile());
        File diagramFile = Objects.requireNonNull(folder.listFiles())[0];

        InputStreamResource report = analyzerService.endAnalyzer(elementExploits, diagramFile, exploitsFile);

        return new ResponseEntity<>(report, HttpStatus.OK);
    }

    /**
     * Returns a File for the given MultipartFile.
     * If it's a diagram file for testing it will be placed into testing folder under /resources/temp_files folder,
     * otherwise it will be stored into /resources/temp_files folder.
     *
     * @param multipartFile given file
     * @param testFile      boolean if the given file is diagram file for testing
     * @return file
     * @throws IOException if there is no such file or directory
     */
    private File getFile(MultipartFile multipartFile, boolean testFile) throws IOException {
        File file;

        // if it is a diagram for testing then save it under /resources/temp_files/testing/
        if (testFile) {
            deleteOnlyFilesFromFolder(resourcesLocation.getTestFile());

            file = new File(resourcesLocation.getTestFile() + Objects
                    .requireNonNull(multipartFile.getOriginalFilename()));
        } else {
            deleteOnlyFilesFromFolder(resourcesLocation.getTempFilesFolder());

            // if it is a schema or the exploits file save it in /resources/temp_files folder
            file = new File(resourcesLocation.getTempFilesFolder() + Objects
                    .requireNonNull(multipartFile.getOriginalFilename()));
        }

        file.createNewFile();
        FileOutputStream out = new FileOutputStream(file);
        out.write(multipartFile.getBytes());
        out.close();
        return file;
    }

    private void saveFile(String diagramXml, String fileName, boolean testFile) throws IOException {
        File file;

        // if it is a diagram for testing then save it under /resources/temp_files/testing/
        if (testFile) {
            deleteOnlyFilesFromFolder(resourcesLocation.getTestFile());

            file = new File(resourcesLocation.getTestFile() + fileName + ".xml");
        } else {
            deleteOnlyFilesFromFolder(resourcesLocation.getTempFilesFolder());

            file = new File(resourcesLocation.getTempFilesFolder() + fileName + ".xml");
        }

        file.createNewFile();
        FileOutputStream out = new FileOutputStream(file);
        out.write(diagramXml.getBytes());
        out.close();
    }

    /**
     * Delete only files from folder
     *
     * @param folderPath  Path to the folder whose files need to be deleted
     */
    private void deleteOnlyFilesFromFolder(String folderPath) throws IOException {
        File testingFolder = new File(folderPath);
        Arrays.stream(testingFolder.listFiles())
                .filter(f -> f.isFile())
                .forEach(f -> f.delete());
    }

}
