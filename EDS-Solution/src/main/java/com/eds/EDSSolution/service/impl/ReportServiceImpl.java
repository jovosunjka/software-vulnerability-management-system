package com.eds.EDSSolution.service.impl;


import com.eds.EDSSolution.service.ReportService;
import com.eds.EDSSolution.utils.ResourcesLocation;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.pdf.PdfWriter;
import com.itextpdf.tool.xml.XMLWorkerHelper;
import org.springframework.core.io.InputStreamResource;
import org.springframework.stereotype.Service;

import java.io.*;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;

import javax.xml.transform.*;
import javax.xml.transform.stream.StreamResult;
import javax.xml.transform.stream.StreamSource;

@Service
public class ReportServiceImpl implements ReportService {

    private ResourcesLocation resourcesLocation = new ResourcesLocation();

    /**
     * Transform the final report (XML document) into PDF file.
     *
     * @param xmlReport report in xml format
     * @return final report as InputStreamResource
     */
    @Override
    public InputStreamResource generatePDF(String xmlReport) {
        TransformerFactory transformerFactory;

        transformerFactory = TransformerFactory.newInstance();
        try {

            // Initialize Transformer instance
            StreamSource transformSource = new StreamSource(new File(resourcesLocation.getXslFo()));
            Transformer transformer = transformerFactory.newTransformer(transformSource);
            transformer.setOutputProperty("{http://xml.apache.org/xalan}indent-amount", "2");
            transformer.setOutputProperty(OutputKeys.INDENT, "yes");

            // Generate XHTML
            transformer.setOutputProperty(OutputKeys.METHOD, "xhtml");

            StreamSource source = new StreamSource(new StringReader(xmlReport));
            ByteArrayOutputStream baos = new ByteArrayOutputStream();
            StreamResult result = new StreamResult(baos);
            transformer.transform(source, result);
            return transform(baos.toString());
        } catch (TransformerFactoryConfigurationError | TransformerException e) {
            e.printStackTrace();
        }
        return null;
    }

    /**
     * This method transforms xml file into InputStreamResource.
     *
     * @param xmlString xml document
     * @return InputStreamResource for the given xml document.
     */
    private InputStreamResource transform(String xmlString) {
        ByteArrayOutputStream out = new ByteArrayOutputStream();
        com.itextpdf.text.Document document = new com.itextpdf.text.Document();
        try {
            PdfWriter writer = PdfWriter.getInstance(document, out);
            document.open();
            XMLWorkerHelper.getInstance().parseXHtml(writer, document,
                    new ByteArrayInputStream(xmlString.getBytes(StandardCharsets.UTF_8)), Charset.forName("UTF-8"));
        } catch (IOException | DocumentException e) {
            e.printStackTrace();
        }
        document.close();
        return new InputStreamResource(new ByteArrayInputStream(out.toByteArray()));
    }

}


