package com.eds.EDSSolution.service.impl;

import com.eds.EDSSolution.model.risk_pattern.CVEitem;
import com.eds.EDSSolution.service.NVDvulnerabilitiesService;
import com.eds.EDSSolution.utils.ResourcesLocation;
import org.json.simple.JSONArray;
import org.json.simple.parser.JSONParser;
import org.json.simple.parser.ParseException;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpMethod;
import org.springframework.http.MediaType;
import org.springframework.stereotype.Service;
import org.springframework.web.client.RequestCallback;
import org.springframework.web.client.ResponseExtractor;
import org.springframework.web.client.RestTemplate;
import org.json.simple.JSONObject;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import net.lingala.zip4j.exception.ZipException;
import net.lingala.zip4j.core.ZipFile;

import static com.eds.EDSSolution.utils.Constants.*;

@Service
public class NVDvulnerabilitiesServiceImpl implements NVDvulnerabilitiesService {
    @Autowired
    private RestTemplate restTemplate;

    private ResourcesLocation resourcesLocation = new ResourcesLocation();

    /**
     * This method will download latest NVD data zip file and extract it into /resources/nvd_data folder.
     */
    public void downloadNVDdataFeed() {
        RequestCallback requestCallback = request -> request.getHeaders()
                .setAccept(Arrays.asList(MediaType.APPLICATION_OCTET_STREAM, MediaType.ALL));

        // stream response instead of loading it in the memory
        ResponseExtractor<Void> responseExtractor = response -> {
            // write response to a file
            Path path = Paths.get(resourcesLocation.getNvdZipPath());
            if (!Files.exists(path)) {
                Files.copy(response.getBody(), path);
            }
            return null;
        };

        // NVD_FEED_PATH is URL of the official NVD json zip file
        restTemplate.execute(NVD_FEED_PATH, HttpMethod.GET, requestCallback, responseExtractor);
        extractNVDfeedZip();
    }

    /**
     * This method extracts NVD zip into /resources/nvd_data folder.
     */
    public void extractNVDfeedZip() {
        try {
            ZipFile zipFile = new ZipFile(resourcesLocation.getNvdZipPath());
            zipFile.extractAll(resourcesLocation.getNvdDataFolder());
        } catch (ZipException e) {
            e.printStackTrace();
        }
    }

    /**
     * This method returns the list of all found CVEs for the given CPE.
     * NVD json file is parsed and then being searched.
     * If there are no CVEs method will return an empty list.
     *
     * @param cpe   is the CPE URL found on the element of the diagram
     * @param limit integer telling what is the limit of the base score of the CVE that should be added into the list
     * @return list of all found CVE items
     * @throws IOException    because of the method parseNVDfileAndGetCVEitems
     * @throws ParseException because of the method parseNVDfileAndGetCVEitems
     */
    @Override
    public List<CVEitem> findCVEforCPE(String cpe, int limit) throws IOException, ParseException {
        JSONArray cveItems = parseNVDfileAndGetCVEitems();
        List<CVEitem> cveList = new ArrayList<>();

        for (Object cveItem : cveItems) {
            JSONObject cve = (JSONObject) cveItem;
            JSONObject configurations = (JSONObject) cve.get(CONFIGURATIONS);
            JSONArray nodes = (JSONArray) configurations.get(NODES);
            for (Object o : nodes) {
                JSONObject node = (JSONObject) o;
                JSONArray cpeMatchList = (JSONArray) node.get(CPE_MATCH);
                if (cpeMatchList != null) {
                    for (Object value : cpeMatchList) {
                        JSONObject cpeMatch = (JSONObject) value;
                        String cpeUri = (String) cpeMatch.get(CPE23URI);
                        if (cpeUri.equals(cpe)) {
                            CVEitem cvEitem = getCVEitem(cve, limit);
                            if (cvEitem != null) {
                                cveList.add(cvEitem);
                            }
                        }
                    }
                }
            }
        }
        return cveList;
    }

    /**
     * This method parses JSON file that is stored in /resources/nvd_data folder.
     *
     * @return JSONArray
     * @throws IOException    could happen when FileReader is being used
     * @throws ParseException could happen when file is being parsed
     */
    private JSONArray parseNVDfileAndGetCVEitems() throws IOException, ParseException {
        File folder = new File(resourcesLocation.getNvdDataFolder());
        File[] listOfFiles = folder.listFiles();
        Object parsedData = new JSONParser().parse(new FileReader(listOfFiles[0].getPath()));

        // typecasting obj to JSONObject
        JSONObject cveData = (JSONObject) parsedData;
        return (JSONArray) cveData.get(CVE_ITEMS);
    }

    /**
     * Returns the CVEitem that is found for the given CPE.
     * This method is called when one CVE item is found for the CPE.
     * All attributes are extracted and set on the CVEitem attributes.
     *
     * @param cveJson JSONObject of the found CVE
     * @param limit   base score limit of the CVE that is going to be returned
     * @return created CVEitem
     */
    @Override
    public CVEitem getCVEitem(JSONObject cveJson, int limit) {
        CVEitem item = new CVEitem();
        JSONObject cve = (JSONObject) cveJson.get(CVE);
        JSONObject cveDataMeta = (JSONObject) cve.get(CVE_DATA);
        String id = (String) cveDataMeta.get(ID);
        item.setId(id);

        JSONObject desc = (JSONObject) cve.get(DESCRIPTION);
        JSONArray desc_data = (JSONArray) desc.get(DESCRIPTION_DATA);
        JSONObject val = (JSONObject) desc_data.get(0);
        item.setDescription(val.get(VALUE).toString());

        JSONObject impact = (JSONObject) cveJson.get(IMPACT);
        JSONObject baseMetric = (JSONObject) impact.get(BASE_METRIC);

        Double exploitabilityScore = (Double) baseMetric.get(EXPLOITABILITY_SCORE);
        Double impactScore = (Double) baseMetric.get(IMPACT_SCORE);

        item.setExploitabilityScore(exploitabilityScore);
        item.setImpactScore(impactScore);

        JSONObject cvssV3 = (JSONObject) baseMetric.get(CVSSV3);
        item = setCvssAttributes(item, cvssV3, limit);            // set all cvss attributes
        return item;
    }

    /**
     * Additional attributes are set here.
     *
     * @param item   CVEitem
     * @param cvssV3 JSONObject found under the "cvssV3" field
     * @param limit  base score limit of the CVE that is going to be returned
     * @return created CVEitem
     */
    private CVEitem setCvssAttributes(CVEitem item, JSONObject cvssV3, int limit) {
        Double baseScore = (Double) cvssV3.get(BASE_SCORE);

        if (baseScore < limit) {
            return null;
        }

        String vectorString = (String) cvssV3.get(VECTOR);
        String privilegesRequired = (String) cvssV3.get(PRIVILEGES_REQUIRED);
        String userInteraction = (String) cvssV3.get(USER_INTERACTION);
        String scope = (String) cvssV3.get(SCOPE);
        String confidentialityImpact = (String) cvssV3.get(CONFIDENTIALITY_IMPACT);
        String integrityImpact = (String) cvssV3.get(INTEGRITY_IMPACT);
        String availabilityImpact = (String) cvssV3.get(AVAILABILITY_IMPACT);
        String attackVector = (String) cvssV3.get(ATTACK_VECTOR);
        String attackComplexity = (String) cvssV3.get(ATTACK_COMPLEXITY);

        item.setAttackVector(attackVector);
        item.setVectorString(vectorString);
        item.setAttackComplexity(attackComplexity);
        item.setPrivilegesRequired(privilegesRequired);
        item.setUserInteraction(userInteraction);
        item.setScope(scope);
        item.setConfidentialityImpact(confidentialityImpact);
        item.setIntegrityImpact(integrityImpact);
        item.setAvailabilityImpact(availabilityImpact);
        item.setBaseScore(baseScore);

        return item;
    }
}

