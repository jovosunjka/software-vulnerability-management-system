package com.eds.EDSSolution.model.report;


import com.eds.EDSSolution.EDS_Library.diagram.ExploitDefinitions;
import com.eds.EDSSolution.model.dto.ElementExploitDTO;
import com.eds.EDSSolution.model.risk_pattern.CweItem;

import javax.xml.bind.annotation.XmlRootElement;
import java.text.SimpleDateFormat;
import java.util.*;


@XmlRootElement(name = "report")
public class ReportClass {

    private String dateAndTimeOfGeneration;
    private String diagramFileName;
    private ReportPatterns patterns;
    private ReportVulnerabilities vulnerabilities;
    private ReportPatternComplexProcesses complexProcess;
    private ExploitDefinitions exploits;
    private DistinctWeaknesses distinctWeaknesses;

    public ReportClass() {

    }

    public ReportClass(String diagramFileName, ExploitDefinitions exploitDefinitions) {
        this(new ArrayList<>(), diagramFileName, new ArrayList<>(), exploitDefinitions);
    }

    public ReportPatternComplexProcesses getComplexProcess() {
        return complexProcess;
    }

    public void setComplexProcess(ReportPatternComplexProcesses complexProcess) {
        this.complexProcess = complexProcess;
    }

    public ReportClass(List<ReportPattern> patternList, String diagramFileName, List<ElementExploitDTO> complexProcessExploits, ExploitDefinitions exploitDefinitions) {
        this.patterns = new ReportPatterns(patternList);
        this.diagramFileName = diagramFileName;

        SimpleDateFormat sdf = new SimpleDateFormat("dd.MM.yyyy. HH:mm");
        this.dateAndTimeOfGeneration = sdf.format(new Date());

        this.vulnerabilities = new ReportVulnerabilities();

        this.setComplexProcess(new ReportPatternComplexProcesses(complexProcessExploits));
        this.exploits = exploitDefinitions;

        Set<CweItem> distinctWeaknessesSet = new HashSet<CweItem>();
        patternList.stream()
                .forEach(p -> distinctWeaknessesSet.addAll(p.getWeaknesses().getWeakness()));
        this.distinctWeaknesses = new DistinctWeaknesses(distinctWeaknessesSet);
    }

    public ReportClass(List<ReportPattern> patternList, String diagramFileName, ExploitDefinitions exploitDefinitions) {
       this(patternList, diagramFileName, new ArrayList<>(), exploitDefinitions);
    }

    public ReportPatterns getPatterns() {
        return patterns;
    }

    public void setPatterns(ReportPatterns patterns) {
        this.patterns = patterns;
    }

    public String getDateAndTimeOfGeneration() {
        return dateAndTimeOfGeneration;
    }

    public void setDateAndTimeOfGeneration(String dateAndTimeOfGeneration) {
        this.dateAndTimeOfGeneration = dateAndTimeOfGeneration;
    }

    public ExploitDefinitions getExploits() {
        return exploits;
    }

    public void setExploits(ExploitDefinitions exploits) {
        this.exploits = exploits;
    }

    public String getDiagramFileName() {
        return diagramFileName;
    }

    public void setDiagramFileName(String diagramFileName) {
        this.diagramFileName = diagramFileName;
    }

    public ReportVulnerabilities getVulnerabilities() {
        return vulnerabilities;
    }

    public void setVulnerabilities(ReportVulnerabilities vulnerabilities) {
        this.vulnerabilities = vulnerabilities;
    }

    public DistinctWeaknesses getDistinctWeaknesses() {
        return distinctWeaknesses;
    }

    public void setDistinctWeaknesses(DistinctWeaknesses distinctWeaknesses) {
        this.distinctWeaknesses = distinctWeaknesses;
    }

    public void setupDistinctWeaknesses() {
        Set<CweItem> distinctWeaknessesSet = new HashSet<CweItem>();
        this.patterns.getPattern().stream()
                .forEach(p -> distinctWeaknessesSet.addAll(p.getWeaknesses().getWeakness()));
        this.distinctWeaknesses = new DistinctWeaknesses(distinctWeaknessesSet);
    }

    public void addReportPatterns(ReportPatterns patterns) {
        this.patterns.addReportPatterns(patterns.getPattern());
    }

    public void addReportVulnerabilities(ReportVulnerabilities reportVulnerabilities) {
        this.vulnerabilities.addReportVulnerabilities(reportVulnerabilities);
    }
}
