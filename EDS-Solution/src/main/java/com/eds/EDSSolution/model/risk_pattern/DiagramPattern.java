package com.eds.EDSSolution.model.risk_pattern;



import com.eds.EDSSolution.EDS_Library.diagram.*;

import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import java.util.stream.Collectors;

public class DiagramPattern {

	private BlockElement element;
	private List<Assets.Asset> assets;

	private BlockElement traceStart;
	private List<Assets.Asset> assetsOnTraceStart;
	
	private List<Element> trace;	
	
	private List<String> foundExploits;
	
	private List<ExploitDefinition> exploitValues;

	private List<String> foundCwes;

	private List<CweItem> cweValues;

	private List<String> assetValues;
	
	public DiagramPattern(BlockElement element, BlockElement traceStart, List<Element> trace) {
		this.element = element;
		this.assets = element.getAssets().getAsset();
		this.assetValues = setAssetValues(element.getAssets());
		this.traceStart = traceStart;
		this.trace = trace;
		this.assetsOnTraceStart = traceStart == null ? new ArrayList<>() : traceStart.getAssets().getAsset();
		
		this.exploitValues = new ArrayList<>();
		this.foundExploits = new ArrayList<>();

		this.foundCwes = new ArrayList<>();
		this.cweValues = new ArrayList<>();
	}


	public BlockElement getElement() {
		return element;
	}

	public List<Assets.Asset> getAssets() {
		return assets;
	}

	public List<Assets.Asset> getAssetsOnTraceStart() {
		return assetsOnTraceStart;
	}

	public BlockElement getTraceStart() {
		return traceStart;
	}

	public List<Element> getTrace() {
		return trace;
	}

	public List<ExploitDefinition> getExploitValues() {
		return exploitValues;
	}

	public void setElement(BlockElement element) {
		this.element = element;
	}

	public void setAssets(List<Assets.Asset> assets) {
		this.assets = assets;
	}

	public void setAssetsOnTraceStart(List<Assets.Asset> assetsOnTraceStart) {
		this.assetsOnTraceStart = assetsOnTraceStart;
	}

	public void setTraceStart(BlockElement traceStart) {
		this.traceStart = traceStart;
	}

	public void setTrace(List<Element> trace) {
		this.trace = trace;
	}

	public void setExploitValues(List<ExploitDefinition> exploitValues) {
		this.exploitValues = exploitValues;
	}	

	public List<String> getAssetValues() {
		return this.assetValues;
	}

	public List<String> getFoundExploits() {
		return foundExploits;
	}

	public List<String> setAssetValues(Assets assets) {
		List<String> assetStrings = new ArrayList<>();
		for (Assets.Asset asset : assets.getAsset()){
			assetStrings.add(asset.getAssetId());
		}
		return assetStrings;
	}

	public void addExploitValue(ExploitDefinition exploitDefinition) {
		this.exploitValues.add(exploitDefinition);		
	}

	public void addCweValue(CweItem cweItem) {
		this.cweValues.add(cweItem);
	}

	public void addAssetValue(String asset) {
		this.assetValues.add(asset);
	}

	public void addExploit(String exploit) {
		if (!this.foundExploits.contains(exploit)) {
			this.foundExploits.add(exploit);
		}
	}
	public void removeExploit(String exploit) {
		this.foundExploits.remove(exploit);
	}

	public List<String> getFoundCwes() {
		return foundCwes;
	}

	public void addCwe(String cwe) {
		if (!this.foundCwes.contains(cwe)) {
			this.foundCwes.add(cwe);
		}
	}

	public void removeCwe(String cwe) {
		this.foundCwes.remove(cwe);
	}


	public List<CweItem> getCweValues() {
		return cweValues;
	}

	public void setCweValues(List<CweItem> cweValues) {
		this.cweValues = cweValues;
	}

	public int getMaxAssetPriority() {
		int maxAssetPriority = 0;

		if (traceStart != null) {
			maxAssetPriority = getMaxAssetPriority(traceStart.getAssets());
		}

		int priority = getMaxAssetPriority(element.getAssets());
		if (priority > maxAssetPriority) {
			maxAssetPriority = priority;
		}

		if (trace != null) {
			for (Element elementOnTrace : trace) {
				if (elementOnTrace instanceof BlockElement) {
					priority = getMaxAssetPriority(((BlockElement) elementOnTrace).getAssets());
					if (priority > maxAssetPriority) {
						maxAssetPriority = priority;
					}
				}
				else if (elementOnTrace instanceof Flow) {
					priority = getMaxAssetPriority(((Flow) elementOnTrace).getAssets());
					if (priority > maxAssetPriority) {
						maxAssetPriority = priority;
					}
				}
			}
		}

		return maxAssetPriority;
	}

	private int getMaxAssetPriority(Assets assets) {
		if (assets.getAsset() == null) {
			return 0;
		}

		int maxAssetPriority = assets.getAsset().stream()
				.map(a ->
					 a.getSecurityGoals().getSecurityGoal().stream()
							.map(sg -> sg.getPriority().intValue())
							 .min(Integer::compareTo)
								.orElse(0)
				)
				.min(Integer::compareTo)
				.orElse(0);
		return maxAssetPriority;
	}
}
