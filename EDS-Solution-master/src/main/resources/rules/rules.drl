//list any import classes here.
import com.eds.EDSSolution.model.risk_pattern.*;
import com.eds.EDSSolution.EDS_Library.diagram.Process;
import com.eds.EDSSolution.EDS_Library.diagram.Diagram.Elements.SqlDatabase;
import com.eds.EDSSolution.EDS_Library.diagram.Diagram.Flows.Http;
import com.eds.EDSSolution.EDS_Library.diagram.Diagram.Elements.Browser;
import com.eds.EDSSolution.EDS_Library.diagram.*;
import com.eds.EDSSolution.model.risk_pattern.ExploitOfAsset;
import java.util.List;


global java.lang.String assetGl;

rule "AP_Request:_Check_Aspects"
    when
     	pattern: DiagramPattern()
     then
        System.out.println("PATTERN: "  + pattern.getElement().getId());
        System.out.println("********************************************************************");
        drools.setFocus("ap_check_primary");
end

// ---------------------------------------------- DATA FLOW ------------------------------------------------------

rule "AP:_Check_Confidentiality"
	agenda-group "ap_check_primary"
    when
     	pattern: DiagramPattern($list : assets)
        $asset : Assets.Asset() from $list
        $securityGoals : Assets.Asset.SecurityGoals() from $asset.securityGoals
     	$goal : Assets.Asset.SecurityGoals.SecurityGoal() from $securityGoals.securityGoal
        Boolean(booleanValue == true) from $goal.name == "confidentiality"

     	elementInTrace : Element() from pattern.trace
     	DiagramPattern(elementInTrace instanceof Http)  // SNIFFING postoji uvek kada barem jedan element u transportu ne enkriptuje
    then
        pattern.addExploit("ed_sniffing");
end

rule "AP:_Check_Confidentiality_for_Session_Hijack"
	agenda-group "ap_check_primary"
    when
     	pattern : DiagramPattern($list : trace)
     	elementInTrace : Element() from $list
     	DiagramPattern(elementInTrace instanceof Http)              // prenos podataka je otvoren
//     	Boolean(booleanValue == true) from ((Http)elementInTrace).containsCookies == true
    then
        pattern.addExploit("ed_sessionhijack");
end



// ------------------------------------------- ELEMENT TYPE IDENTIFICATION   -----------------------------------

rule "AP:_Check_process"
	agenda-group "ap_check_primary"
    when
        pattern : DiagramPattern(element instanceof Process)
    then
        drools.setFocus("ap_process");
end

rule "AP:_Check_datastore"
	agenda-group "ap_check_primary"
    when
        DiagramPattern(element instanceof DataStore)
    then
        drools.setFocus("ap_datastore");
end

rule "AP:_Check_external_entity"
	agenda-group "ap_check_primary"
    when
        DiagramPattern(element instanceof ExternalEntity)
    then
        drools.setFocus("ap_external_entity");
end


// ------------------------------------------- PROCESS   -------------------------------------------------------

rule "AP_Process:_Check_Process"
	agenda-group "ap_process"
    when
        pattern : DiagramPattern(element instanceof Process)
    then
        pattern.addExploit("ed_elevationprivilege");
end

rule "AP_Process:_Check_Access_Controll"
	agenda-group "ap_process"
    when
     	pattern : DiagramPattern()

		Boolean(booleanValue == true) from ((Process)pattern.element).requiresAuthentication == true
		Boolean(booleanValue == true) from ((Process)pattern.element).requiresAuthorization == true
    then
        pattern.removeExploit("ed_elevationprivilege");
end

rule "AP_Process:_Session_Timeout"
	agenda-group "ap_process"
    when
     	pattern : DiagramPattern()      // ako se sesija ne tajmautuje, moguce je pogoditi njen ID pa ga iskoristiti

		Boolean(booleanValue == true) from ((Process)pattern.element).sessionHasTimeouts == false
		Boolean(booleanValue == true) from pattern.traceStart == null
    then
         pattern.addExploit("ed_sessionhijack");
end

rule "AP_Process:_Asset_Availability_For_CSRF"
	agenda-group "ap_process"
    when
     	pattern: DiagramPattern($list : assets)
        $asset : Assets.Asset() from $list
        $securityGoals : Assets.Asset.SecurityGoals() from $asset.securityGoals
     	$goal : Assets.Asset.SecurityGoals.SecurityGoal() from $securityGoals.securityGoal
        Boolean(booleanValue == true) from $goal.name == "confidentiality" or
        Boolean(booleanValue == true) from $goal.name == "availability" or
        Boolean(booleanValue == true) from $goal.name == "integrity"
    then
        drools.setFocus("ap_process_csrf");
end

rule "AP_Process:_From_Browser_CSRF"
	agenda-group "ap_process_csrf"
    when
       	pattern : DiagramPattern(traceStart instanceof Browser)
     	DiagramPattern(flow : trace.get(1))

     	Boolean(booleanValue == true) from ((Flow)flow).containsCookies == true
     	Boolean(booleanValue == true) from ((Process)pattern.element).hasForgeryProtection == false
    then
         pattern.addExploit("ed_csrf");
end

rule "AP_Process:_Receives_XML"
	agenda-group "ap_process"
    when
        pattern : DiagramPattern($list : trace)
     	flowInTrace : Element() from $list

     	Boolean(booleanValue == true) from ((Process)pattern.element).sanitizeInput == false
     	Boolean(booleanValue == true) from flowInTrace instanceof Flow
     	Boolean(booleanValue == true) from ((Flow)flowInTrace).containsXML == true
    then
        pattern.addExploit("ed_injectionxml");
        drools.setFocus("ap_process_injection_xml");
end


rule "AP_Process:_Check_XML_Injection"
	agenda-group "ap_process_injection_xml"
    when
     	pattern : DiagramPattern($list : trace)
     	elementInTrace : Element() from $list

     	Boolean(booleanValue == true) from elementInTrace instanceof Process
     	Boolean(booleanValue == true) from ((Process)elementInTrace).sanitizeInput == true   // stitimo podatke
    then
        pattern.removeExploit("ed_injectionxml");
end


// ------------------------------------------- DATA STORE  -------------------------------------------------------

rule "AP_Datastore:_SQL_Database"
	agenda-group "ap_datastore"
    when
        pattern: DiagramPattern(element instanceof SqlDatabase)                             // podaci idu ka bazi
		Boolean(booleanValue == true) from pattern.traceStart instanceof ExternalEntity
    then
        pattern.addExploit("ed_injectionsql");
        drools.setFocus("ap_datastore_remove_potential_injection");
end

rule "AP_Datastore:_Encrypting"
	agenda-group "ap_datastore"
    when
     	pattern : DiagramPattern()

		Boolean(booleanValue == true) from ((DataStore)pattern.element).dataIsEncrypted == false
		Boolean(booleanValue == true) from ((DataStore)pattern.element).storeCredentials == true
    then
        pattern.addExploit("ed_sessionhijack");
end

rule "AP_Datastore:_SQL_Database_Remove_injection"
	agenda-group "ap_datastore_remove_potential_injection"
    when
        pattern : DiagramPattern(traceStart instanceof ExternalEntity)
     	$elementInTrace : Element() from pattern.trace

     	Boolean(booleanValue == true) from $elementInTrace instanceof Process
     	Boolean(booleanValue == true) from ((Process)$elementInTrace).sanitizeInput == true
    then
        pattern.removeExploit("ed_injectionxml");
end



// ------------------------------------------- EXTERNAL ENTITY  ---------------------------------------------------

rule "AP:_Check_external_browser"
	agenda-group "ap_external_entity"
    when
        pattern : DiagramPattern(element instanceof Browser)    // podaci idu ka External Entity

     	Boolean(booleanValue == true) from pattern.traceStart instanceof Process
    then
        pattern.addExploit("ed_xss");
        drools.setFocus("ap_external_check_xss");
end

rule "AP_External:_Process_XSS"
	agenda-group "ap_external_check_xss"
    when
     	pattern : DiagramPattern($list : trace)
     	elementInTrace : Element() from $list

     	Boolean(booleanValue == true) from elementInTrace instanceof Process
     	Boolean(booleanValue == true) from ((Process)elementInTrace).sanitizeOutput == true   // stitimo podatke
    then
        pattern.removeExploit("ed_xss");
end

