package com.eds.EDSSolution.exceptions;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.ControllerAdvice;
import org.springframework.web.bind.annotation.ExceptionHandler;
import org.springframework.web.context.request.WebRequest;
import org.springframework.web.servlet.mvc.method.annotation.ResponseEntityExceptionHandler;

import java.util.Optional;

@ControllerAdvice
public class RestResponseEntityExceptionHandler extends ResponseEntityExceptionHandler {

    @ExceptionHandler(value = {FileNotReadableException.class})
    protected ResponseEntity<Object> fileNotReadable(RuntimeException ex, WebRequest request) {
        String bodyOfResponse = ex.getMessage();
        bodyOfResponse = Optional.ofNullable(bodyOfResponse).orElse("File not readable");
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.EXPECTATION_FAILED, request);
    }

    @ExceptionHandler(value = {NoRulesFilesLocationException.class})
    protected ResponseEntity<Object> noRulesLocation(RuntimeException ex, WebRequest request) {
        String bodyOfResponse = ex.getMessage();
        bodyOfResponse = Optional.ofNullable(bodyOfResponse).orElse("Rules not found");
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.NOT_FOUND, request);
    }

    @ExceptionHandler(value = {ParserCouldNotBeInitializedException.class})
    protected ResponseEntity<Object> parserNotInitialized(RuntimeException ex, WebRequest request) {
        String bodyOfResponse = ex.getMessage();
        bodyOfResponse = Optional.ofNullable(bodyOfResponse).orElse("Invalid parse");
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.NOT_ACCEPTABLE, request);
    }

    @ExceptionHandler(value = {ReportFileNotWrittenException.class})
    protected ResponseEntity<Object> reportNotWritable(RuntimeException ex, WebRequest request) {
        String bodyOfResponse = ex.getMessage();
        bodyOfResponse = Optional.ofNullable(bodyOfResponse).orElse("Not writable");
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.EXPECTATION_FAILED, request);
    }

    @ExceptionHandler(value = {RuleFilesException.class})
    protected ResponseEntity<Object> ruleFileException(RuntimeException ex, WebRequest request) {
        String bodyOfResponse = ex.getMessage();
        bodyOfResponse = Optional.ofNullable(bodyOfResponse).orElse("Error in rule definition files");
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.EXPECTATION_FAILED, request);
    }

    @ExceptionHandler(value = {XMLFileNotValidException.class})
    protected ResponseEntity<Object> xmlFileNotValid(RuntimeException ex, WebRequest request) {
        String bodyOfResponse = ex.getMessage();
        bodyOfResponse = Optional.ofNullable(bodyOfResponse).orElse("XML Diagram contains semantic errors");
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.BAD_REQUEST, request);
    }

    @ExceptionHandler(value = {XMLFileNotWellFormedException.class})
    protected ResponseEntity<Object> xmlFileNotWellFormed(RuntimeException ex, WebRequest request) {
        String bodyOfResponse = ex.getMessage();
        bodyOfResponse = Optional.ofNullable(bodyOfResponse).orElse("XML Diagram contains syntax errors");
        return handleExceptionInternal(ex, bodyOfResponse, new HttpHeaders(), HttpStatus.NOT_ACCEPTABLE, request);
    }
}
